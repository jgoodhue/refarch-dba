{"componentChunkName":"component---src-pages-technology-decision-index-mdx","path":"/technology/decision/","result":{"pageContext":{"frontmatter":{"title":"Automation Decision Service summary","description":"Automation Decision Service summary"},"relativePagePath":"/technology/decision/index.mdx","titleType":"append","MdxNode":{"id":"50c118ad-e565-5fac-ac75-790dcb435eb7","children":[],"parent":"8026cb59-599b-59e5-a2bc-0662274479e9","internal":{"content":"---\ntitle: Automation Decision Service summary\ndescription: Automation Decision Service summary\n---\n\n<InlineNotification kind=\"warning\">\n<strong>Updated 10/22/2020</strong> - Work in progress\n</InlineNotification>\n\n## Introduction\n\n[Decision management](https://www.ibm.com/automation/business-rules) supports three main use cases:\n\n* Let users model, author and validate decisions in a low-code environment.\n* Externalize decision logic from microservice code so it can be developed, managed and tested by business users, but still integrated as a service in a cloud native microservice based.\n* Integrate with AI model for combining predictive scoring and business rules \n\nThe [product documentation](https://www.ibm.com/support/knowledgecenter/en/SSYHZ8_20.0.x/com.ibm.dba.aid/topics/con_aid_intro.html)\n\n## Getting started\n\n### Installing on IBM Cloud Openshift cluster\n\nThis section is a quick summary of the steps to do to deploy version 2020.2.\n\n##### Pre-requisites\n\nAccess to an Opendhift cluster and get `oc` CLI.\n\n##### Get access to the container images\n\n* Get your product entitlement key at https://myibm.ibm.com/products-services/containerlibrary site.\n* If not done already create an openShift project to host the decision service\n\n ```shell\n oc -new-project cp4automation\n ```\n\n* Create an image pull secret to access the IBM image registry \n\n ```shell\n oc create secret docker-registry admin.registrykey --docker-username=cp --docker-password=<Generated-Key> --docker-server=cp.icr.io -n cp4automation\n > secret/admin.registrykey created\n ```\n\n* Check that you can access and download the Cloud Pak for Automation images: \n\n ```shell\n docker login cp.icr.io -u cp -p <Generated-Key>\n docker pull cp.icr.io/cp/cp4a/aae/dba-dbcompatibility-initcontainer:20.0.2\n ```\n\n##### Install common services\n\n* Get scripts and config files archive from IBM github cloud pak for automation: \n\n ```shell\n wget https://github.com/icp4a/cert-kubernetes/archive/20.0.2.1.tar.gz\n ```\n\n*Those scripts define custom resource definitions for kubernetes deployment.*\n\n* Expand archive: `tar xvf 20.0.2.tar.gz`\n* Change to folder cert-kubernetes-20.0.2\n* If not already present on the cluster create the `common-service` OpenShift project\n\n ```shell\n # verify project does not exist\n oc new-project common-service\n ```\n* In common-service project, run the following script to install the different operators. If you do want to set the trace of the execution, you can uncomment the second line `set -x` in this script.\n\n  ```shell\n  ./scripts/deploy_CS3.4.sh nonbai\n  ```\n    \n\n##### Prepare the operator storage\n\n* Edit `descriptors/operator-shared-pvc.yaml` and use ibmc-file-retain-gold-gid\n* Create the PVC: \n\n ```shell\n oc create -f descriptors/operator-shared-pvc.yaml\n ```\n\n* Copy the drivers: \n\n ```\n oc cp scripts/jdbc cp4a/<operator-podname>:/opt/ansible/share -c ansible\n ```\n\n##### Install the operator\n\n* Deploy operator: \n\n ```\n ./scripts/deployOperator.sh -i cp.icr.io/cp/cp4a/icp4a-operator:20.0.2 -p admin.registrykey -n cp4a -a accept`\n ```\n\n##### Deploy ODM\n\n* Apply the CR:   (note: this CR also includes a simple install of BAI)\n* Update the network policies for ODM: \n\n ```\n oc get netpol\n ```\n\n* Edit the odm-dc-networkpolicy, odm-dr-network-policy, odm-ds-console-network-policy, odm-ds-runtime-network-policy to add a blanket egress policy, for example:\n\n ```yaml\n  spec:\n  egress:\n  - {}\n  ingress:\n  - ports:\n    - port: <PORT>\n      protocol: TCP\n  podSelector:\n    matchLabels:\n      run: ppe-odm-decisioncenter\n  policyTypes:\n  - Egress\n  - Ingress\n ```\n\n\n","type":"Mdx","contentDigest":"243d0e689dc516a0b24eb2d9927f49a9","counter":204,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Automation Decision Service summary","description":"Automation Decision Service summary"},"exports":{},"rawBody":"---\ntitle: Automation Decision Service summary\ndescription: Automation Decision Service summary\n---\n\n<InlineNotification kind=\"warning\">\n<strong>Updated 10/22/2020</strong> - Work in progress\n</InlineNotification>\n\n## Introduction\n\n[Decision management](https://www.ibm.com/automation/business-rules) supports three main use cases:\n\n* Let users model, author and validate decisions in a low-code environment.\n* Externalize decision logic from microservice code so it can be developed, managed and tested by business users, but still integrated as a service in a cloud native microservice based.\n* Integrate with AI model for combining predictive scoring and business rules \n\nThe [product documentation](https://www.ibm.com/support/knowledgecenter/en/SSYHZ8_20.0.x/com.ibm.dba.aid/topics/con_aid_intro.html)\n\n## Getting started\n\n### Installing on IBM Cloud Openshift cluster\n\nThis section is a quick summary of the steps to do to deploy version 2020.2.\n\n##### Pre-requisites\n\nAccess to an Opendhift cluster and get `oc` CLI.\n\n##### Get access to the container images\n\n* Get your product entitlement key at https://myibm.ibm.com/products-services/containerlibrary site.\n* If not done already create an openShift project to host the decision service\n\n ```shell\n oc -new-project cp4automation\n ```\n\n* Create an image pull secret to access the IBM image registry \n\n ```shell\n oc create secret docker-registry admin.registrykey --docker-username=cp --docker-password=<Generated-Key> --docker-server=cp.icr.io -n cp4automation\n > secret/admin.registrykey created\n ```\n\n* Check that you can access and download the Cloud Pak for Automation images: \n\n ```shell\n docker login cp.icr.io -u cp -p <Generated-Key>\n docker pull cp.icr.io/cp/cp4a/aae/dba-dbcompatibility-initcontainer:20.0.2\n ```\n\n##### Install common services\n\n* Get scripts and config files archive from IBM github cloud pak for automation: \n\n ```shell\n wget https://github.com/icp4a/cert-kubernetes/archive/20.0.2.1.tar.gz\n ```\n\n*Those scripts define custom resource definitions for kubernetes deployment.*\n\n* Expand archive: `tar xvf 20.0.2.tar.gz`\n* Change to folder cert-kubernetes-20.0.2\n* If not already present on the cluster create the `common-service` OpenShift project\n\n ```shell\n # verify project does not exist\n oc new-project common-service\n ```\n* In common-service project, run the following script to install the different operators. If you do want to set the trace of the execution, you can uncomment the second line `set -x` in this script.\n\n  ```shell\n  ./scripts/deploy_CS3.4.sh nonbai\n  ```\n    \n\n##### Prepare the operator storage\n\n* Edit `descriptors/operator-shared-pvc.yaml` and use ibmc-file-retain-gold-gid\n* Create the PVC: \n\n ```shell\n oc create -f descriptors/operator-shared-pvc.yaml\n ```\n\n* Copy the drivers: \n\n ```\n oc cp scripts/jdbc cp4a/<operator-podname>:/opt/ansible/share -c ansible\n ```\n\n##### Install the operator\n\n* Deploy operator: \n\n ```\n ./scripts/deployOperator.sh -i cp.icr.io/cp/cp4a/icp4a-operator:20.0.2 -p admin.registrykey -n cp4a -a accept`\n ```\n\n##### Deploy ODM\n\n* Apply the CR:   (note: this CR also includes a simple install of BAI)\n* Update the network policies for ODM: \n\n ```\n oc get netpol\n ```\n\n* Edit the odm-dc-networkpolicy, odm-dr-network-policy, odm-ds-console-network-policy, odm-ds-runtime-network-policy to add a blanket egress policy, for example:\n\n ```yaml\n  spec:\n  egress:\n  - {}\n  ingress:\n  - ports:\n    - port: <PORT>\n      protocol: TCP\n  podSelector:\n    matchLabels:\n      run: ppe-odm-decisioncenter\n  policyTypes:\n  - Egress\n  - Ingress\n ```\n\n\n","fileAbsolutePath":"/Users/jeromeboyer/Code/DBA/refarch-dba/docs/src/pages/technology/decision/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}